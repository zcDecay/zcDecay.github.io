<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦在这里腐了朽剩流泪</title>
  
  <subtitle>腐朽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zcdecay.github.io/"/>
  <updated>2018-07-27T08:24:15.701Z</updated>
  <id>https://zcdecay.github.io/</id>
  
  <author>
    <name>decay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java开发规范</title>
    <link href="https://zcdecay.github.io/2018/07/26/Java-Style/"/>
    <id>https://zcdecay.github.io/2018/07/26/Java-Style/</id>
    <published>2018-07-26T00:00:00.000Z</published>
    <updated>2018-07-27T08:24:15.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然手册上说的一些不是强制的,但是,我还是希望自己能强制执行这些,规范是养成的,需要时间的积累,需要代码的累积.一段代码可以看出一个人的修养.以下的示例,我只会举一些正例,因为我们需要忘记反例,而不是避免这些.–&gt;Newt</p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><blockquote><p>参考至阿里巴巴Java开发手册:遵从码出高效， 码出质量的原则,我写出这样一篇完整的开发规范.所谓无规矩不成方圆，无规范不能协作.代码的字里行间流淌的是软件生命中的血液， 质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升质量意识</p></blockquote><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><ol><li>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束.</li><li><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式.</p><pre><code>正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文.</code></pre></li><li><p>类名使用 UpperCamelCase 风格，必须遵从驼峰形式,但以下情形例外： DO / BO / DTO / VO / AO</p><pre><code>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion</code></pre></li><li><p>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式.</p><pre><code>正例： localValue / getHttpMessage() / inputUserId</code></pre></li><li><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长.</p><pre><code>正例： MAX_STOCK_COUNT</code></pre></li><li>抽象类命名使用 Abstract 或 Base 开头； 异常类命名使用 Exception 结尾； 测试类命名以它要测试的类的名称开始,以 Test 结尾.</li><li><p>中括号是数组类型的一部分，数组要规范 </p><pre><code>正例： String[] args;</code></pre></li><li>POJO 类中布尔类型的变量，都不要加 is,否则部分框架解析会引起序列化错误.</li><li><p>包名统一使用小写,点分隔符之间有且仅有一个自然语义的英语单词.包名统一使用单数形式,但是类名如果有复数含义,类名可以使用复数形式.</p><pre><code>正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）</code></pre></li><li>杜绝完全不规范的缩写， 避免望文不知义.</li><li><p>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意.</p><pre><code>正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。</code></pre></li><li><p>如果模块、 接口、类、方法使用了设计模式，在命名时体现出具体模式.</p><pre><code>正例： public class OrderFactory;</code></pre></li><li>接口类中的方法和属性不要加任何修饰符号（public 也不要加） ，保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。                    <pre><code>正例： 接口方法签名： void f();</code></pre></li><li><p>接口和实现类的命名有两套规则：</p><blockquote><p>对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口,内部的实现类用 Impl 的后缀与接口区别.</p></blockquote><pre><code>正例： CacheServiceImpl 实现 CacheService 接口。    </code></pre><blockquote><p>如果是形容能力的接口名称，取对应的形容词做接口名（通常是–able 的形式）。</p></blockquote><pre><code>正例： AbstractTranslator 实现 Translatable。</code></pre></li><li><p>枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p><blockquote><p>枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p></blockquote><pre><code>正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKOWN_REASON。</code></pre></li><li><p>各层命名规约：</p><blockquote><p>ervice/DAO 层方法命名规约</p></blockquote><ol><li>获取单个对象的方法用 get 做前缀。</li><li>获取多个对象的方法用 list 做前缀。</li><li>获取统计值的方法用 count 做前缀。</li><li>插入的方法用 save/insert 做前缀。</li><li>删除的方法用 remove/delete 做前缀。</li><li>修改的方法用 update 做前缀。</li></ol><blockquote><p>领域模型命名规约</p></blockquote><ol><li>数据对象： xxxDO， xxx 即为数据表名。</li><li>数据传输对象： xxxDTO， xxx 为业务领域相关的名称。</li><li>展示对象： xxxVO， xxx 一般为网页名称。</li><li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO</li></ol></li></ol><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><ol><li>不允许任何魔法值（即未经定义的常量） 直接出现在代码中.</li><li>long 或者 Long 初始赋值时， 使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<blockquote><p>Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</p></blockquote></li><li><p>不要使用一个常量类维护所有常量， 按常量功能进行归类，分开维护.</p><blockquote><p>大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护</p></blockquote><pre><code>正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。</code></pre></li><li>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<ul><li>跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下.</li><li>应用内共享常量：放置在一方库中， 通常是 modules 中的 constant 目录下.</li><li>子工程内部共享常量：即在当前子工程的 constant 目录下。</li><li>包内共享常量：即在当前包下单独的 constant 目录下。</li><li>类内共享常量：直接在类内部 private static final 定义。</li></ul></li><li><p>如果变量值仅在一个范围内变化，且带有名称之外的延伸属性， 定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。</p><pre><code>正例： public Enum { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6),SUNDAY(7);}</code></pre></li></ol><h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><ol><li>大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果是非空代码块:<ul><li>左大括号前不换行。</li><li>左大括号后换行。</li><li>右大括号后还有括号前换行。</li><li>右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li></ul></li><li>左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格.</li><li>if/for/while/switch/do 等保留字与括号之间都必须加空格.</li><li>任何二目、 三目运算符的左右两边都需要加一个空格。<blockquote><p>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p></blockquote></li><li>采用 4 个空格缩进，禁止使用 tab 字符。<blockquote><p>如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。</p></blockquote></li></ol><p>正例:<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 缩进 4 个空格</span><br><span class="line">String say = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">// 运算符的左右必须有一个空格</span><br><span class="line">int flag = 0;</span><br><span class="line"></span><br><span class="line">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格</span><br><span class="line">if (flag == 0) &#123;</span><br><span class="line">System.out.println(say);</span><br><span class="line">&#125;</span><br><span class="line">// 左大括号前加空格且不换行；左大括号后换行</span><br><span class="line">if (flag == 1) &#123;</span><br><span class="line">System.out.println(&quot;world&quot;);</span><br><span class="line">// 右大括号前换行，右大括号后有 else，不用换行</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;ok&quot;);</span><br><span class="line">// 在右大括号后直接结束，则必须换行</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li><p>注释的双斜线与注释内容之间有且仅有一个空格。</p><pre><code>正例： // 注释内容， 注意在//和注释内容之间有一个空格</code></pre></li><li>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<ul><li>第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li><li>运算符与下文一起换行。</li><li>方法调用的点符号与下文一起换行。</li><li>方法调用时，多个参数， 需要换行时， 在逗号后进行。</li><li>在括号前不要换行</li></ul></li></ol><p>正例：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">// 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行</span><br><span class="line">sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...</span><br><span class="line">.append(&quot;huang&quot;)...</span><br><span class="line">.append(&quot;huang&quot;)...</span><br><span class="line">.append(&quot;huang&quot;);</span><br></pre></td></tr></table></figure></code></pre><ol start="8"><li><p>方法参数在定义和传入时，多个参数逗号后边必须加空格</p><pre><code>正例： 下例中实参的&quot;a&quot;,后边必须要有一个空格。        method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</code></pre></li><li>IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式</li><li>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐</li></ol><p>正例：<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 3;</span><br><span class="line">long b = 4L;</span><br><span class="line">float c = 5F;</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br></pre></td></tr></table></figure></p><ol start="11"><li>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。    <blockquote><p>没有必要插入多个空行进行隔开。</p></blockquote></li></ol><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><ol><li>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</li><li>所有的覆写方法，必须加@Override 注解。<blockquote><p>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p></blockquote></li><li><p>相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</p><blockquote><p>说明： 可变参数必须放置在参数列表的最后。 </p></blockquote><pre><code>正例： public User getUsers(String type, Integer... ids) {...}</code></pre></li><li>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li><li>不能使用过时的类或方法。<blockquote><p>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</p></blockquote></li><li><p>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals</p><pre><code>正例： &quot;test&quot;.equals(object);</code></pre></li><li>所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。<blockquote><p>说明： 对于 Integer var = ? 在-128 至 127 范围内的赋值， Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断</p></blockquote></li><li><p>关于基本数据类型与包装数据类型的使用标准.</p><blockquote><p>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。</p><ul><li>所有的 POJO 类属性必须使用包装数据类型。</li><li>RPC 方法的返回值和参数必须使用包装数据类型。</li><li>所有的局部变量使用基本数据类型。</li></ul></blockquote><pre><code>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</code></pre></li><li>定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</li><li>序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值<blockquote><p>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</p></blockquote></li><li>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li><li>POJO 类必须写 toString 方法。使用 IDE 的中工具： source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString<blockquote><p>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p></blockquote></li><li>使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险.</li></ol><p>说明：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;a,b,c,,&quot;;</span><br><span class="line">String[] ary = str.split(&quot;,&quot;);</span><br><span class="line">// 预期大于 3，结果是 3</span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></code></pre><ol start="14"><li>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起.</li><li>类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法.</li><li>setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度</li><li>循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。<blockquote><p>反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p></blockquote></li><li>final 可以声明类、成员变量、方法、以及本地变量<ul><li>不允许被继承的类，如： String 类。</li><li>不允许修改引用的域对象，如： POJO 类的域变量。</li><li>不允许被重写的方法，如： POJO 类的 setter 方法。</li><li>不允许运行过程中重新赋值的局部变量。</li><li>避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构</li></ul></li><li>慎用 Object 的 clone 方法来拷贝对象。<blockquote><p>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p></blockquote></li><li>类成员与方法访问控制从严.<ul><li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li><li>工具类不允许有 public 或 default 构造方法。</li><li>类非 static 成员变量并且与子类共享，必须是 protected。</li><li>类非 static 成员变量并且仅在本类使用，必须是 private。</li><li>类 static 成员变量如果仅在本类使用，必须是 private。</li><li>若是 static 成员变量，必须考虑是否为 final。</li><li>类成员方法只供类内部调用，必须是 private。</li><li>类成员方法只对继承类公开，那么限制为 protected。</li></ul></li></ol><h2 id="engage-in-chitchat"><a href="#engage-in-chitchat" class="headerlink" title="engage in chitchat"></a>engage in chitchat</h2><blockquote><p>今天依旧晴空,空气清晰,吃了一根梦龙,哇,感觉贼爽!!</p></blockquote>]]></content>
    
    <summary type="html">
    
      Alibaba开发规范
    
    </summary>
    
      <category term="Java Style" scheme="https://zcdecay.github.io/categories/Java-Style/"/>
    
    
      <category term="Blog" scheme="https://zcdecay.github.io/tag/Blog/"/>
    
      <category term="Java Style" scheme="https://zcdecay.github.io/tag/Java-Style/"/>
    
  </entry>
  
  <entry>
    <title>POJO</title>
    <link href="https://zcdecay.github.io/2018/07/26/POJO/"/>
    <id>https://zcdecay.github.io/2018/07/26/POJO/</id>
    <published>2018-07-26T00:00:00.000Z</published>
    <updated>2018-07-27T08:24:15.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><h2 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h2><blockquote><p><code>Persistant object</code>(持久对象)</p></blockquote><blockquote><p>对应数据模型(数据库),可以看成是与数据库中的表相映射的java对象.最简单的PO就是对应数据库中某个表中的一条记录,多个记录可以用PO的集合.PO仅仅用于表示数据,不包含任何对数据库的操作.通常遵守 Java Bean 的规范,拥有 getter/setter 方法.</p></blockquote><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><blockquote><p><code>Data Access Object</code>(数据访问对象)</p></blockquote><blockquote><p>对持久层的操作,为service层提供接口,此对象用于访问数据库,通过其中对数据库的操作方法,结合 PO,对数据库进行相关操作.配合VO,提供数据库的CRUD操作.加载业务逻辑与数据库资源之间.</p></blockquote><h2 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h2><blockquote><p><code>Value Object</code>(表现对象)</p></blockquote><blockquote><p>与前端进行交互的java对象,主要显示对应界面的数据对象,对于前端不需要的数据,出于减少数据量大小和保护数据结构不外泄的目的,不应该在VO中体现出来,通常遵守 Java Bean 的规范,拥有 getter/setter 方法.</p></blockquote><h2 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h2><blockquote><p><code>Data Transfer Object</code>(数据传输对象)<br>通常用于不同服务或服务不同分层之间的数据传输,DTO与VO概念相似,字段也基本一致.但又有一些不同,不同主要是设计理念上的.比如 API 服务需要使用的 DTO 就可能与 VO 存在差异.通常遵守 Java Bean 的规范，拥有 getter/setter 方法.</p></blockquote><h2 id="BO"><a href="#BO" class="headerlink" title="BO"></a>BO</h2><blockquote><p><code>Business Object</code>业务对象<br>业务对象，封装对象、复杂对象,里面可能包含多个类.包含了业务逻辑,常常封装了对DAO,RPC等的调用,可以进行PO/VO/DTO之间的转换.BO通常位于业务层,区别于对外提供服务的服务层:BO提供了基本业务单元的积分业务操作,在设计上属于被服务层业务流程调用的对象,一个业务流程可能需要调用多个BO来完成.</p></blockquote><h2 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h2><blockquote><p><code>plain ordinary java Object</code>简单无规则java对象</p></blockquote><blockquote><p>PO、VO、DTO 都是典型的 POJO而 DAO、BO一般都不是 POJO，只提供一些调用方法。</p></blockquote><p>介绍一个简单的例子:</p><pre><code>用户类  name phone对于数据库层也就两列,业务层,传输,和前台展示时,都只有这两项.用户类 + password那么PO属性也是3个,一般数据库里这几个字段你的PO就有几个属性,但是在传输层和前台展示时,不应该把password这个属性一块传递过去.    po : name phone password    dto : anme phone    vo : name phone现在有添加一个枚举status显示用户的一些状态,前台不会直接将枚举用来显示,会根据状态进行一些操作.    po : name phone password status    dto : name phone status    vo : name phone接着BO,一个用户一定会关联很多其他的表例:用户设置/用户信息等BO就包括用户本身的属性 + 用户设置 + 用户信息</code></pre><p>例2:</p><pre><code>数据表：表中的面试题包括编号、题目、选项、答案、创建时间、修改时间.PO：包括题目、选项、答案、创建时间、修改时间.VO：题目、选项、答案、上一题URL、下一题URL.DTO：编号、题目、选项、答案、上一题编号、下一题编号.DAO：数据库增删改查方法；BO：业务基本操作.</code></pre>]]></content>
    
    <summary type="html">
    
      POJO
    
    </summary>
    
      <category term="POJO" scheme="https://zcdecay.github.io/categories/POJO/"/>
    
    
      <category term="Blog" scheme="https://zcdecay.github.io/tag/Blog/"/>
    
      <category term="POJO" scheme="https://zcdecay.github.io/tag/POJO/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="https://zcdecay.github.io/2018/07/25/MarkDown/"/>
    <id>https://zcdecay.github.io/2018/07/25/MarkDown/</id>
    <published>2018-07-25T04:00:00.000Z</published>
    <updated>2018-07-27T08:24:15.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MarkDown对于我们的影响是重大的,简单的语法结构可以使我们快速的写出一篇简洁,大方的博客.对于MarkDown语法的熟悉就成了必要的了！！—&gt;Newt</p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>可读性，无论如何，都是最重要的.一份使用 Markdown 格式撰写的文件可以直接以纯文本发布.MarkDown语法说明(网络查找部分):更多详情请<a href="http://www.markdown.cn" target="_blank" rel="noopener">点我</a>.掌握MarkDown语法可以使我们更加高效的写我们的文章,语法的目标也是(成为一种适用于网络的书写语法).</p><h3 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h3><ul><li>兼容 HTML</li><li>区块元素</li><li>区段元素</li><li>其它</li></ul><h2 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h2><ul><li><strong>兼容HTML</strong></li></ul><blockquote><p>MarkDwon兼容HTML标签,在文章里面可以直接使用HTML撰写,不需要标注这是HTML/MarkDown,只要直接加标签就可以了.简单的例子:</p></blockquote><pre><code>newt的一个段落&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><ul><li><strong>特殊字符</strong></li></ul><blockquote><p>特殊字符在很多语言中都有自己的特殊处理,在HTML中的<code>&lt;</code> 和 <code>&amp;</code>,<code>&lt;</code>符号是用于起始标签,<code>&amp;</code>用于标记HTML实体,HTML中©可以写成 &copy;    也可以直接输入©HTML中 <code>&lt;</code> 和 <code>&amp;</code> 都需要转码,但是MarkDwon不必,输入&amp;和&amp;都显示 <code>&amp;</code>, <code>&lt;</code> 也一样 4 &lt; 5 后面要加上空格,否则会当其实标签使用.4&lt;5 输出的字符码是&lt;,不需要考虑转码问题.</p></blockquote><p>罗列一些字符码:</p><pre><code>显示结果        描述        实体名称        实体编号    space        空格        &amp;nbsp;       &amp;#160;&lt;            小于号        &amp;lt;       &amp;#60;    &gt;           大于号     &amp;gt;       &amp;#62;&amp;            与号        &amp;amp;        &amp;#38;    &quot;            引号        &amp;quot;        &amp;#34;    |            单引        &amp;apos;        &amp;#39;    </code></pre><h2 id="block-element"><a href="#block-element" class="headerlink" title="block element"></a>block element</h2><ul><li><p><strong>段落和换行</strong></p><blockquote><p>一个MarkDown段落的前后要有一个以上的空行,段落不需要使用空格/制表符来进行缩进.</p></blockquote></li><li><p><strong>标题</strong></p><ol><li>Setext:使用=(最高阶标题)或者-(第二阶标题)表示两阶标题,符号数量建议3个以上(任何数量的=/-都会有效果0).</li><li><p>atx:插入1~6个#,对应标题的1到6阶(也可以闭合性的结束标签,但是真正决定阶数的是行首的#).</p><pre><code>This is an H1=============This is an H2-------------# 这是 H1## 这是 H2  ######## 这是 H6  ######</code></pre></li></ol></li></ul><ul><li><p><strong>区块引用</strong></p><blockquote><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p></blockquote><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</code></pre></li></ul><ul><li><p><strong>列表</strong></p><ol><li><p>无序列表</p><blockquote><p>使用星号、加号或是减号作为列表标记</p></blockquote><pre><code>*    我是无序列表1*    我是无序列表2</code></pre></li><li><p>有序列表</p><blockquote><p>使用数字+英文句点</p></blockquote><pre><code>1.  我是有序列表12.    我是有序列表2</code></pre></li></ol></li><li><p><strong>代码区块</strong></p><ol><li>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</li><li><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p> Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre></li><li><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体,这样可以让你非常容易使用Markdown插入范例用的 HTML 原始码[只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理</p></li><li>代码区块中,一般的MarkDown语法不会被转换,像是*便是自己,这标识你可以很容易的以MarkDown语法撰写MarkDown语法相关的文件.</li></ol></li></ul><ul><li><p><strong>分隔线</strong></p><blockquote><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线</p></blockquote><pre><code>* * *********- - ----------------------------------------</code></pre></li></ul><h2 id="Segment-element"><a href="#Segment-element" class="headerlink" title="Segment element"></a>Segment element</h2><ul><li><p><strong>链接</strong></p><ol><li><p>行内式</p><blockquote><p>在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可</p></blockquote><pre><code>[My Blog](http://www.newt.fun)</code></pre></li><li><p>参考式</p><blockquote><p>在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记</p></blockquote><pre><code>[My Blog][blogLink][blogLink]: http://www.newt.fun  &quot;梦在这里腐了朽剩流泪&quot;</code></pre><blockquote><p>链接内容定义的形式为：</p></blockquote></li></ol><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着        </li></ul></li><li><p><strong>强调</strong></p><blockquote><p>Markdown 使用星号 <code>*</code> 和底线<code>_</code>作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code></p></blockquote><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>  会转成:</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre></li><li><p><strong>代码</strong></p><blockquote><p>如果要标记一小段行内代码，你可以用反引号把它包起来’ ` ‘.</p></blockquote><pre><code>Use the `printf()` function.</code></pre><p>  会转成:</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre></li><li><p><strong>图片</strong></p><ol><li><p>行内式</p><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</p><pre><code>![blog](/path/to/img.jpg)![blog](/path/to/img.jpg &quot;title&quot;)</code></pre></li></ul></li><li><p>参考式</p><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li><p>接着一个方括号,里面放着图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>![blog][tag][tag]: url/to/image  &quot;This is My Blog&quot;</code></pre></li></ul></li></ol></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ul><li><p><strong>反斜杠</strong></p><blockquote><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p></blockquote><pre><code>\*This is My Blog\*</code></pre><blockquote><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p></blockquote><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre></li><li><p><strong>自动链接</strong></p><blockquote><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样.</p></blockquote><pre><code>&lt;http://15611700291@163.com/&gt;</code></pre><p>  会转成:</p><pre><code>&lt;a href=&quot;http://15611700291@163.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre></li></ul><h2 id="engage-in-chitchat"><a href="#engage-in-chitchat" class="headerlink" title="engage in chitchat"></a>engage in chitchat</h2><blockquote><p>今天天气阴,但是万里晴空,心情惆怅.这是半个多月后的一次更新,感觉有点对不起自己.</p></blockquote>]]></content>
    
    <summary type="html">
    
      搭建博客过程
    
    </summary>
    
      <category term="MarkDown" scheme="https://zcdecay.github.io/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="https://zcdecay.github.io/tag/MarkDown/"/>
    
      <category term="Blo" scheme="https://zcdecay.github.io/tag/Blo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客（进来你不会后悔）</title>
    <link href="https://zcdecay.github.io/2018/07/04/CreateBlog/"/>
    <id>https://zcdecay.github.io/2018/07/04/CreateBlog/</id>
    <published>2018-07-04T01:00:00.000Z</published>
    <updated>2018-07-27T08:24:15.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在自己的学习生涯中，记录下你的过程，是一件很适意的事情。搭建一个只属于你的博客，就像是一个记事本，记录下你的生活，任何你需要分享的事，总需要有一件事来满足自己虚荣！！—&gt;Newt</p></blockquote><p>首先，声明下：该篇博客以（<a href="https://www.jianshu.com/p/4eaddcbe4d12" target="_blank" rel="noopener">5分钟 搭建免费个人博客</a>）和（<a href="https://mp.weixin.qq.com/s/y9V91U7JF_tbkbvXJBqTWQ" target="_blank" rel="noopener">手把手搭建个人博客（图文教程）</a>）两篇为参考，也算是我个人的一个总结，希望小伙伴们减少一些不必要的错误。</p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>上面提到的其中一篇博客提到过，使用初始的虚拟机进行搭建，后面博主也会出相关的建议博客，请继续关注。而本篇博客是基于GitHub Pages的免费搭建，完全不需要付费。本篇从零开始，期待大家都拥有属于自己的博客！！！</p><h3 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h3><ul><li>生成静态页面简单</li><li>支持 Markdown（减少了令人头疼的排版）</li><li>部署简单，日常使用仅需五个命令</li><li>插件提供</li><li>扩展性强</li><li>文档全面</li></ul><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><h3 id="Environmental-Science"><a href="#Environmental-Science" class="headerlink" title="Environmental Science"></a>Environmental Science</h3><blockquote><ul><li>拥有GitHub账号（重要）</li></ul><ul><li>Git</li><li>Node</li><li>Hexo</li></ul></blockquote><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></h3><ul><li>注册</li></ul><p><a href="https://imgchr.com/i/Pmt14f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/Pmt14f.md.jpg" alt="注册"></a> </p><ul><li>创建一个属于自己的库</li></ul><p><a href="https://imgchr.com/i/PmtJgg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtJgg.md.jpg" alt="去添加仓库"></a> </p><p><a href="https://imgchr.com/i/PmtejH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtejH.md.jpg" alt="创建一个属于自己的库"></a> </p><p><a href="https://imgchr.com/i/PmtuDA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtuDA.md.jpg" alt="创建完成"></a> </p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></h3><ul><li><p>创建完自己的库之后，下面就是要让电脑克隆自己所创建的库，为了方便电脑上的代码发布静态页面到GitHub上创建的仓库当中。</p></li><li><p>首先要安装一个git，下面就简单描述一些配置。</p><ul><li>首先进入<a href="https://git-scm.com/" target="_blank" rel="noopener">GitHub官网</a>，下载适合自己电脑的版本</li></ul><p><a href="https://imgchr.com/i/PmtKHI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtKHI.md.jpg" alt="创建完成 "></a> </p><ul><li><p>在安装过程中直接默认选项即可（小小的偷个懒，要想详细安装，请参考网络）。</p></li><li><p>在本地创建一个ssh key ，目的是在你电脑上获得一个密匙关联到GitHub上，方便随时上传你的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t RSA -C &quot;user@123.com&quot;//生成公钥，私钥</span><br><span class="line">$ cat .ssh/id_rsa.pub //查看公钥</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在GitHub上找到setting –&gt; SSH and GPG keys –&gt; New SSH key,拷贝上去，就创建好了！！</p></li></ul><p><a href="https://imgchr.com/i/Pmtnud" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/Pmtnud.md.jpg" alt="添加ssh"></a> </p><p><a href="https://imgchr.com/i/PmtZge" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtZge.md.jpg" alt="添加ssh"></a></p><ul><li><p>检查是否绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>添加全局变量的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your name&quot;//设置全局属性</span><br><span class="line">$ git config --global user.email &quot;your_email@email.com&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node</a></h3><ul><li>安装Node.js</li></ul><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h3><ul><li><p>安装Hexo客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><blockquote><ul><li>创建站点</li><li>安装主题</li><li>修改基础配置</li><li>编写文章</li><li>测试</li><li>发布到GithubPages</li><li>访问博客</li></ul></blockquote><h3 id="Hexo-structure"><a href="#Hexo-structure" class="headerlink" title="Hexo structure"></a>Hexo structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── public</span><br><span class="line">├── source</span><br><span class="line">└── _posts</span><br><span class="line">└── themes</span><br><span class="line">└── landscape更多请看官网</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><blockquote><p>采用<a href="https://my.oschina.net/u/1861837/blog/526142" target="_blank" rel="noopener">YAML语法格式</a>，全局配置文件。网站很多的配置在这里：<strong>网站名称</strong>,<strong>副标题</strong>,<strong>网站描述</strong>,<strong>作者</strong>,<strong>语言</strong>,<strong>主题</strong>,<strong>部署地址</strong>等参数。官方配置：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">戳我</a>。</p></blockquote><p><strong>package.json</strong></p><blockquote><p>hexo框架的参数和依赖的插件</p></blockquote><p><strong>scaffolds</strong></p><blockquote><p>脚手架，当创建一篇文章的时候，hexo根据该目录下的文件进行建构。</p></blockquote><p><strong>public</strong></p><blockquote><p>所有文件生成的html静态文件等存放的目录。执行hexo g 进行静态文件的生成</p></blockquote><p><strong>source</strong></p><blockquote><p>新建的博文都存放在该目录下。</p><p>_posts：在该目录下新建博文（HelloWorld.md）。存放的都是markdown文件，可以直接进行编辑</p></blockquote><p><strong>themes</strong></p><blockquote><p>网站的主题目录，hexo具有很好的拓展，主持很多的主题风格。</p><p>landscape：hexo默认的主题，不再_config.yml中进行主题配置默认使用。</p><p>可以自己挑选喜欢的主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题选择！！</a></p></blockquote><p><strong>create hexo</strong></p><blockquote><p>将下面的username替换成你的username（强迫症患者），执行下面的命令，创建username.github.io    的文件夹，并进行hexo的初始化。username.github.io中包含以上提到的hexo文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init username.github.io</span><br></pre></td></tr></table></figure><h3 id="Install-Theme"><a href="#Install-Theme" class="headerlink" title="Install Theme"></a>Install Theme</h3><blockquote><p>推荐几个不错的主题：</p></blockquote><ul><li><a href="https://github.com/SuperKieran/TKL" target="_blank" rel="noopener">https://github.com/SuperKieran/TKL</a>（TKL）</li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a>（Next）</li><li><a href="https://github.com/monniya/hexo-theme-new-vno" target="_blank" rel="noopener">https://github.com/monniya/hexo-theme-new-vno</a>（vno非常赞）</li><li><a href="https://github.com/maochunguang/black-blue" target="_blank" rel="noopener">https://github.com/maochunguang/black-blue</a>（黑蓝主题）</li><li><a href="https://link.jianshu.com/?t=http://litten.github.io/" target="_blank" rel="noopener">http://litten.github.io/</a>（Yilia）</li></ul><blockquote><p>进入hexo的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题选择</a>，找到自己喜欢的主题，然后点击进去找到该主题的github，然后拷贝主题的仓库地址，执行命令，安装成功。具体请看下面的图片详解：</p></blockquote><p><a href="https://imgchr.com/i/Pmt8C8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/Pmt8C8.md.jpg" alt="hexo主题官网"></a> </p><p> <a href="https://imgchr.com/i/PmtQEt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtQEt.md.jpg" alt="进去主题页面，点击GitHub页面"></a></p><p><a href="https://imgchr.com/i/PmtlUP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtlUP.md.jpg" alt="找到主题的github页面"></a></p><p><a href="https://imgchr.com/i/PmtG8S" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/07/08/PmtG8S.md.jpg" alt="copy主题的仓库地址"></a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd username.github.io//进入文件夹</span><br><span class="line">$ git clone https://github.com/SuperKieran/TKL themes/TKL //将此处主题仓库地址替换上面copy的地址，克隆到themes下的TKL（主题）文件夹内</span><br></pre></td></tr></table></figure><h3 id="Modify-Configuration"><a href="#Modify-Configuration" class="headerlink" title="Modify Configuration"></a>Modify Configuration</h3><blockquote><p>使用编辑器打开_config.yml修改一下内容，注意：键值对之间使用空格分开</p></blockquote><p><strong>项目配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: newt     //博客标题</span><br><span class="line">author: dimsky     //作者名字</span><br><span class="line">language: zh-Hans     //中文</span><br><span class="line">theme: TKL            //主题名称（重要，上一步安装的主题文件夹）</span><br><span class="line">deploy:</span><br><span class="line">  type: git        //使用Git进行发布</span><br><span class="line">  repo: https://github.com/username/username.github.io.git    // 自己创建的Github仓库地址</span><br></pre></td></tr></table></figure><p><strong>主题配置</strong></p><blockquote><p>在安装的主题文件夹中，也有_config.yml配置文件，一般根据主题进行配置</p></blockquote><h3 id="Writing-Articles"><a href="#Writing-Articles" class="headerlink" title="Writing Articles"></a>Writing Articles</h3><blockquote><p>到现在为止，框架的搭建已经完成了，可以开始你写博客了，在username.github.io/source/_posts下创建HelloWorld.md文件，先熟悉下<a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">MarkDown</a>语法，赶快开始你的HelloWorld吧！！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo搭建博客（进来你不会后悔）</span><br><span class="line">description: 搭建博客</span><br><span class="line">date: </span><br><span class="line">tags:</span><br><span class="line">- blog</span><br><span class="line">---</span><br><span class="line">Welcome  to  my   Blog</span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><blockquote><p>输入一下的命令就可以访问你的博客了，在浏览器中输入，若没有出现，请查看端口占用情况，若你的电脑上安装 福昕阅读器 ，没错就是它，它占用了4000端口，卸载它你就可以访问啦。或者使用第二个命令。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s//默认端口4000，访问地址 https://localhost:4000 </span><br><span class="line">$ hexo s -p 5000 //设置指定端口，访问地址 https://localhost:5000</span><br></pre></td></tr></table></figure><h3 id="GithubPages"><a href="#GithubPages" class="headerlink" title="GithubPages"></a>GithubPages</h3><blockquote><p>第一次部署，终端会提示你输入Github的邮箱和密码，输入正确后，稍等片刻，就会把你的博客发布到GithubPages站点上，之后每次写完博客，执行下面第二个命令，就可以直接发布了！！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save//安装自动化部署工具</span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d//清理静态文件 &amp;&amp; 生成静态文件 &amp;&amp; 部署</span><br></pre></td></tr></table></figure><h3 id="Visit"><a href="#Visit" class="headerlink" title="Visit"></a>Visit</h3><blockquote><p>在浏览器的地址栏上输入：<a href="http://newt.fun" target="_blank" rel="noopener">https://username.github.io/</a>。就大功告成了！！有什么要讨论的，欢迎和我沟通！！</p></blockquote>]]></content>
    
    <summary type="html">
    
      搭建博客过程
    
    </summary>
    
      <category term="Blog" scheme="https://zcdecay.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://zcdecay.github.io/tag/Blog/"/>
    
      <category term="Dream" scheme="https://zcdecay.github.io/tag/Dream/"/>
    
      <category term="Insist" scheme="https://zcdecay.github.io/tag/Insist/"/>
    
      <category term="build" scheme="https://zcdecay.github.io/tag/build/"/>
    
  </entry>
  
  <entry>
    <title>感恩篇</title>
    <link href="https://zcdecay.github.io/2018/07/03/Tanks/"/>
    <id>https://zcdecay.github.io/2018/07/03/Tanks/</id>
    <published>2018-07-03T01:00:00.000Z</published>
    <updated>2018-07-27T08:24:15.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Head"><a href="#Head" class="headerlink" title="Head :"></a>Head :</h2><p>Welcome to<strong><a href="http://www.newt.fun" target="_blank" rel="noopener">梦在这里腐了朽剩流泪</a></strong>!这是我的第一篇博客，而我这第一篇博客，也不算是博客，就当是我的一些杂谈吧，暂时定义这篇为感谢篇。</p><p>从搭建博客到现在，过了有段时间了，这段时间里，我经历了一些困难，就是一些功能(包括博客的搭建，稍后我会出一些教程，帮帮大家)的完善，这些闲暇时间的帮助让我如淋甘雨，在这里，我非常感谢开源，感谢各位大佬的帮助。</p><h2 id="Body"><a href="#Body" class="headerlink" title="Body :"></a>Body :</h2><ol><li><p>首先是搭建博客，这个教程是我借鉴于一个<a href="https://www.jianshu.com/p/4eaddcbe4d12" target="_blank" rel="noopener">良心的一篇博文</a>,不小心进入我博文的读者可以去看看，它里面讲述了5分钟搭建博客，小编愚钝，用了<a href="#" title="本人发展方向为JAVA，最近才接触的node+hexo">一下午的时间</a> ，我的博客也是基于Hexo这个对于小白容易上手的框架搭建的.</p></li><li><p>博客目前实现的一些基础的功能，例如:左键点击出现js特效，添加<strong><a href="https://blog.mythsman.com/" title="感谢这位和我差不多的老哥" target="_blank" rel="noopener">豆瓣插件</a></strong>，添加<strong><a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">音乐播放</a></strong> ,<strong><a href="http://busuanzi.ibruce.info" target="_blank" rel="noopener">不蒜子站点统计</a></strong>,<strong><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine极简的评论系统</a></strong>,<strong><a href="http://dashboard.daovoice.io/app/7443fe6c/install" target="_blank" rel="noopener">匿名客服聊天</a></strong> ~~~,更多的功能请期待后期的维护。</p></li><li><p>说到博客框架，这我就要说一说Hexo了，Hexo是一个简洁的，高效的博客框架，Hexo可以使用我们喜欢的MarkDown来进行编辑博文，可以立刻生成漂亮，不需要烦恼排版的靓丽静态页面。</p></li><li><p>Hexo里面有很多大牛搭建的各式各样的主题，大家可以直接使用，作者也很积极的回答大家的问题，而我使用的框架是KTL风格的，贴下<strong><a href="https://go.kieran.top/" target="_blank" rel="noopener">作者的博客</a> + <a href="https://github.com/SuperKieran" target="_blank" rel="noopener">GitHub</a> </strong>，若有幸看的上博主博客风格的，可以加入<strong>野生TKL答疑群</strong> ，但要想加入大佬的群，就要先添加作者的<strong><a href="#" title="我还要暴露作者微信吗，还是你们去作者博客/Github发现吧">微信</a></strong>啦，当然我幸运的成为了其中的一员了，相信我们都期待你的加入，期待新的成员特色，共同进步。</p></li></ol><h2 id="End"><a href="#End" class="headerlink" title="End :"></a>End :</h2><ul><li>这是第一篇博文，也是我开启博客生涯的按钮，我会坚持的！！</li><li>最后，感谢与你跨空间相遇，无论这时你是怎么看到的这篇博文的，这3分钟你是属于我的！！</li></ul>]]></content>
    
    <summary type="html">
    
      搭建博客的心历
    
    </summary>
    
      <category term="Thanks" scheme="https://zcdecay.github.io/categories/Thanks/"/>
    
    
      <category term="Talk" scheme="https://zcdecay.github.io/tag/Talk/"/>
    
      <category term="Thanks" scheme="https://zcdecay.github.io/tag/Thanks/"/>
    
  </entry>
  
</feed>
